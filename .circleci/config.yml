version: 2.1

orbs:
  cypress: cypress-io/cypress@1
  node: circleci/node@5.0.2

executors:
  node:
    docker:
      - image: cimg/node:16.13.1
  hasura:
    docker:
      - image: cimg/node:16.13.1
      - image: postgres:13
        name: postgres
        environment:
          POSTGRES_PASSWORD: postgrespassword
      - image: hasura/graphql-engine:v2.8.4.cli-migrations-v3
        name: hasura
        environment:
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_ADMIN_SECRET: key
          HASURA_GRAPHQL_NO_OF_RETRIES: 30
          HASURA_ACHIEVEMENTS_ENDPOINT: http://172.17.0.1:3000/api/achievement
          NEXT_API_BEARER_TOKEN: key

  docker:
    docker:
      - image: docker:stable
  clever-cloud-deployer:
    docker:
      - image: cimg/node:lts

jobs:
  install-dependencies:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: install-dependencies
          command: npm ci
      - save_cache:
          paths:
            - node_modules
          key: v4-packaging-dependencies-{{ checksum "package-lock.json" }}
  qc-prettier:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: qc-prettier
          command: npm run prettier:check
  eslint:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: eslint
          command: npm run lint
  unit-test:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: unit-test
          command: npm run test:unit
  hasura-test-apply-migrations:
    executor: hasura
    steps:
      - checkout
      - run:
          name: "install hasura cli"
          command: sudo npm i -g hasura-cli
      - run:
          name: "wait for Hasura for a minute max"
          command: dockerize -wait http://hasura:8080/healthz -timeout 1m
      - run:
          name: migrate
          working_directory: hasura
          command: hasura migrate apply --endpoint http://hasura:8080
      - run:
          name: metadata
          working_directory: hasura
          command: hasura metadata apply --endpoint http://hasura:8080
  build:
    executor: hasura
    parameters:
      graphql-url:
        type: string
      base-url:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: "wait for Hasura for a minute max"
          command: dockerize -wait http://hasura:8080/healthz -timeout 1m
      - run:
          name: "Apply migrations"
          command: npm run hasura -- --endpoint=http://hasura:8080 migrate apply
      - run:
          name: "Apply metadatas"
          command: npm run hasura -- --endpoint=http://hasura:8080 metadata apply
      - run:
          name: Create .env.local file
          command: echo -e "NEXT_PUBLIC_ADMINS=jean-philippe.baconnais@zenika.com;adrien.nortain@zenika.com;mai-ly.lehoux@zenika.com;pierre.brethes@zenika.com;benjamin.bourgeois@zenika.com;stephanie.herve-pineau@zenika.com;laurent.tardif@zenika.com;pierre.nicoli@zenika.com;\nNEXT_PUBLIC_GRAPHQL_URL=http://hasura:8080/v1/graphql\nNEXT_PUBLIC_BASE_URL=http://localhost:3000\nNEXT_PUBLIC_AUTH0_CONNECTION=google-oauth2\nNEXT_PUBLIC_AUTH0_DOMAIN=zenika.eu.auth0.com\nNEXT_PUBLIC_AUTH0_CLIENT_ID=DgnUjXulP4ijDqQLsFTDKw3e12wHN2Gt\nNEXT_PUBLIC_AUTH0_AUDIENCE=https://zenika.eu.auth0.com/api/v2/\nNEXT_PUBLIC_AUTH0_CALLBACK=/auth\nHASURA_ADMIN_SECRET=key\nNEXT_API_BEARER_TOKEN=Bearer key\nHASURA_ACHIEVEMENTS_ENDPOINT=http://172.17.0.1:3000/api/achievement" >> .env.local
      - run:
          name: build
          command: npm run build:local
  deploy-hasura:
    parameters:
      hasura-deploy-dir:
        type: string
        default: ../hasura
      hasura-clever-app-id:
        type: string
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          name: Package Hasura
          command: |
            mkdir --parents << parameters.hasura-deploy-dir >>
            cp ./hasura.Dockerfile << parameters.hasura-deploy-dir >>/Dockerfile
      - run:
          name: Deploy Hasura
          working_directory: << parameters.hasura-deploy-dir >>
          command: |
            git config --global user.email "dsi@zenika.com"
            git config --global user.name "Zenika"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.hasura-clever-app-id >>
            clever deploy --force
  run-migrations:
    docker:
      - image: hasura/graphql-engine:v2.1.1.cli-migrations-v3
    parameters:
      hasura-admin-secret:
        type: string
      hasura-endpoint:
        type: string
    steps:
      - checkout
      - run:
          name: Apply migrations
          working_directory: hasura
          command: hasura-cli migrate apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>
      - run:
          name: Apply metadata
          working_directory: hasura
          command: hasura-cli metadata apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>
  deploy:
    docker:
      - image: circleci/node:lts
    parameters:
      graphql-url:
        type: string
      clever-app-id:
        type: string
      base-url:
        type: string
      auth0-connection:
        type: string
      auth0-domain:
        type: string
      auth0-clientId:
        type: string
      auth0-audience:
        type: string
      auth0-callback:
        type: string
      hasura-admin-secret:
        type: string
      public-admins:
        type: string
    steps:
      - checkout
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
      - run:
          name: build
          command: NEXT_PUBLIC_ADMINS=<< parameters.public-admins >> NEXT_PUBLIC_BASE_URL=<< parameters.base-url >> NEXT_PUBLIC_GRAPHQL_URL=<< parameters.graphql-url >> NEXT_PUBLIC_AUTH0_CONNECTION=<< parameters.auth0-connection >> NEXT_PUBLIC_AUTH0_DOMAIN=<< parameters.auth0-domain >> NEXT_PUBLIC_AUTH0_CLIENT_ID=<< parameters.auth0-clientId >> NEXT_PUBLIC_AUTH0_AUDIENCE=<< parameters.auth0-audience >> NEXT_PUBLIC_AUTH0_CALLBACK=<< parameters.auth0-callback >> HASURA_ADMIN_SECRET=<< parameters.hasura-admin-secret >> npm run build:prod
      - run:
          name: Package
          command: |
            mkdir deploy
            cp -r .next deploy
            cp -r public deploy
            cp package.json deploy
            cp package-lock.json deploy
            cp next.config.js deploy
      - run:
          name: Deploy
          working_directory: deploy
          command: |
            git config --global user.email "dsi@zenika.com"
            git config --global user.name "Zenika"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.clever-app-id >>
            clever deploy --force
  deploy-bot:
    executor: clever-cloud-deployer
    parameters:
      clever-app-id:
        type: string
    steps:
      - checkout
      - run:
        name: Package
        command: |
          mkdir deploy-bot
          cp -r public deploy-bot
          cp package.json deploy-bot
          cp package-lock.json deploy-bot
      - run:
          name: Deploy
          working_directory: deploy-bot
          command: |
            cd bot-slack
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.clever-app-id >>
            clever deploy --force

workflows:
  qc-test-deploy-staging:
    jobs:
      - install-dependencies
      - qc-prettier:
          requires:
            - install-dependencies
      - eslint:
          requires:
            - install-dependencies
      - unit-test:
          requires:
            - install-dependencies
      - build:
          name: build
          requires:
            - qc-prettier
            - eslint
            - unit-test
          graphql-url: http://localhost:8080/v1/graphql
          base-url: http://localhost:3000
      - deploy-hasura:
          name: deploy-hasura-staging
          hasura-clever-app-id: app_dd676b9a-5e95-4bab-9e21-ba6f9582e12b
          requires:
            - build
          context: clever-cloud2-zenika-dev
          filters: &deploy-staging-filters
            branches:
              only: main
      - run-migrations:
          name: run-migrations-staging
          hasura-admin-secret: $HASURA_ADMIN_SECRET_STAGING
          hasura-endpoint: $HASURA_ENDPOINT_STAGING
          requires:
            - deploy-hasura-staging
          filters: *deploy-staging-filters
      - deploy:
          name: deploy-staging
          requires:
            - run-migrations-staging
          graphql-url: $NEXT_STAGING_PUBLIC_GRAPHQL_URL
          auth0-connection: $NEXT_STAGING_PUBLIC_AUTH0_CONNECTION
          auth0-domain: $NEXT_PUBLIC_AUTH0_DOMAIN
          auth0-clientId: $NEXT_PUBLIC_AUTH0_CLIENT_ID
          auth0-audience: $NEXT_PUBLIC_AUTH0_AUDIENCE
          auth0-callback: $NEXT_PUBLIC_AUTH0_CALLBACK
          hasura-admin-secret: $HASURA_ADMIN_SECRET_STAGING
          base-url: $NEXT_STAGING_BASE_URL
          public-admins: $NEXT_STAGING_PUBLIC_ADMINS
          clever-app-id: app_ca84588b-5a62-4b57-a5f0-86260c6382a5
          context: clever-cloud2-zenika-dev
          filters: *deploy-staging-filters
      - deploy-bot:
          name: deploy-staging-bot
          requires:
            - qc-prettier
            - eslint
            - unit-test
          clever-app-id: app_f3ae1d9d-d9ad-4ce3-a019-d18a99e5c73a
          context: clever-cloud2-zenika-dev
          filters:
            branches:
              only: ci/build_bot

  qc-test-deploy:
    jobs:
      - install-dependencies:
          filters: &deploy-filters
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - qc-prettier:
          requires:
            - install-dependencies
          filters: *deploy-filters
      - eslint:
          requires:
            - install-dependencies
          filters: *deploy-filters
      - unit-test:
          requires:
            - install-dependencies
          filters: *deploy-filters
      - build:
          name: build
          requires:
            - qc-prettier
            - eslint
            - unit-test
          graphql-url: http://localhost:8080/v1/graphql
          base-url: http://localhost:3000
          filters: *deploy-filters
      - deploy-hasura:
          name: deploy-hasura
          hasura-clever-app-id: $HASURA_CLEVER_APP_ID_PROD
          requires:
            - build
          context: clever-cloud2-zenika-dev
          filters: *deploy-filters
      - run-migrations:
          name: run-migrations
          hasura-admin-secret: $HASURA_ADMIN_SECRET_PROD
          hasura-endpoint: $HASURA_ENDPOINT_PROD
          requires:
            - deploy-hasura
          filters: *deploy-filters
      - deploy:
          name: deploy
          requires:
            - run-migrations
          graphql-url: $NEXT_PROD_PUBLIC_GRAPHQL_URL
          auth0-connection: $NEXT_PROD_PUBLIC_AUTH0_CONNECTION
          auth0-domain: $NEXT_PUBLIC_AUTH0_DOMAIN
          auth0-clientId: $NEXT_PUBLIC_AUTH0_CLIENT_ID
          auth0-audience: $NEXT_PUBLIC_AUTH0_AUDIENCE
          auth0-callback: $NEXT_PUBLIC_AUTH0_CALLBACK
          hasura-admin-secret: $HASURA_ADMIN_SECRET_PROD
          base-url: $NEXT_PROD_BASE_URL
          public-admins: $NEXT_PROD_PUBLIC_ADMINS
          clever-app-id: $CLEVER_APP_ID_PROD
          context: clever-cloud2-zenika-dev
          filters: *deploy-filters
