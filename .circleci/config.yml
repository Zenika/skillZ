# ---------------------------------------------------------------------------------
# SETUP
# ---------------------------------------------------------------------------------

version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:16.13.1
  hasura:
    docker:
      - image: cimg/node:16.13.1
      - image: postgres:13
        name: postgres
        environment:
          POSTGRES_PASSWORD: postgrespassword
      - image: hasura/graphql-engine:v2.16.1.cli-migrations-v3
        name: hasura
        environment:
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
          HASURA_GRAPHQL_ADMIN_SECRET: key
          HASURA_GRAPHQL_NO_OF_RETRIES: 30
          HASURA_ACHIEVEMENTS_ENDPOINT: http://172.17.0.1:3000/api/achievement
          NEXT_API_BEARER_TOKEN: key
  docker:
    docker:
      - image: docker:stable
  clever-cloud-deployer:
    docker:
      - image: cimg/node:lts

# ---------------------------------------------------------------------------------
# COMMANDS - reusable commands
# ---------------------------------------------------------------------------------

commands:
  restore-dependencies:
    steps:
      - restore_cache:
          keys:
            - v4-packaging-dependencies-{{ checksum "package-lock.json" }}
            - v4-packaging-dependencies-
  save-dependencies:
    steps:
      - save_cache:
          paths:
            - node_modules
          key: v4-packaging-dependencies-{{ checksum "package-lock.json" }}
  install-dependencies:
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Install dependencies
          command: npm ci
      - save-dependencies
  test-hasura-migrations:
    steps:
      - run:
          name: Wait for Hasura
          command: dockerize -wait http://hasura:8080/healthz -timeout 1m
      - run:
          name: Apply Migrations
          command: npm run hasura -- --endpoint=http://hasura:8080 migrate apply
      - run:
          name: Apply Metadata
          command: npm run hasura -- --endpoint=http://hasura:8080 metadata apply
  clever-deploy:
    parameters:
      deploy-dir:
        type: string
        default: .
      clever-app-id:
        type: string
    steps:
      - run:
          name: Deploy
          working_directory: << parameters.deploy-dir >>
          command: |
            git config --global user.email "dsi@zenika.com"
            git config --global user.name "Zenika"
            git init
            git add .
            git commit -m "deploy!"
            sudo npm install --global clever-tools
            clever login --secret=$CLEVER_SECRET --token=$CLEVER_TOKEN
            clever link << parameters.clever-app-id >>
            clever deploy --force

# ---------------------------------------------------------------------------------
# JOBS - reusable jobs
# ---------------------------------------------------------------------------------

jobs:
  install-dependencies:
    executor: node
    steps:
      - install-dependencies

  format:
    executor: node
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Check Prettier formatting
          command: npm run prettier:check

  lint:
    executor: node
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Run ESLint
          command: npm run lint

  unit-test:
    executor: node
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Run Unit Tests
          command: npm run test:unit

  test-hasura-migrations:
    executor: hasura
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Wait for Hasura
          command: dockerize -wait http://hasura:8080/healthz -timeout 1m
      - run:
          name: Apply Migrations
          working_directory: hasura
          command: npm run hasura -- --endpoint=http://hasura:8080 migrate apply
      - run:
          name: Apply Metadata
          working_directory: hasura
          command: npm run hasura -- --endpoint=http://hasura:8080 metadata apply

  apply-hasura-migrations:
    docker:
      - image: hasura/graphql-engine:v2.1.1.cli-migrations-v3
    parameters:
      hasura-admin-secret:
        type: string
      hasura-endpoint:
        type: string
    steps:
      - checkout
      - run:
          name: Apply migrations
          working_directory: hasura
          command: hasura-cli migrate apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>
      - run:
          name: Apply metadata
          working_directory: hasura
          command: hasura-cli metadata apply --admin-secret << parameters.hasura-admin-secret >> --endpoint << parameters.hasura-endpoint >>

  build:
    executor: hasura
    steps:
      - checkout
      - restore-dependencies
      - test-hasura-migrations
      - run:
          name: Build Project
          command: |
            echo -e "NEXT_PUBLIC_GRAPHQL_URL=http://hasura:8080/v1/graphql\nNEXT_PUBLIC_BASE_URL=http://localhost:3000\nNEXT_PUBLIC_AUTH0_CONNECTION=google-oauth2\nNEXT_PUBLIC_AUTH0_DOMAIN=zenika.eu.auth0.com\nNEXT_PUBLIC_AUTH0_CLIENT_ID=DgnUjXulP4ijDqQLsFTDKw3e12wHN2Gt\nNEXT_PUBLIC_AUTH0_AUDIENCE=https://zenika.eu.auth0.com/api/v2/\nNEXT_PUBLIC_AUTH0_CALLBACK=/auth\nHASURA_ADMIN_SECRET=key\nNEXT_API_BEARER_TOKEN=Bearer key\nHASURA_ACHIEVEMENTS_ENDPOINT=http://172.17.0.1:3000/api/achievement" >> .env
            npm run build:local

  deploy-hasura:
    executor: clever-cloud-deployer
    parameters:
      clever-app-id:
        type: string
    steps:
      - checkout
      - run:
          name: Package Hasura
          command: |
            mkdir -p hasura
            cp ./hasura.Dockerfile ./hasura/Dockerfile
      - clever-deploy:
          deploy-dir: "./hasura"
          clever-app-id: << parameters.clever-app-id >>

  deploy-bot:
    executor: clever-cloud-deployer
    parameters:
      clever-app-id:
        type: string
    steps:
      - checkout
      - run:
          name: Package bot
          command: |
            mkdir -p deploy-bot
            cp -r ./bot-slack/* deploy-bot
      - clever-deploy:
          deploy-dir: "./deploy-bot"
          clever-app-id: << parameters.clever-app-id >>

  deploy-app:
    docker:
      - image: cimg/node:lts
    parameters:
      graphql-url:
        type: string
      clever-app-id:
        type: string
      base-url:
        type: string
      auth0-connection:
        type: string
      auth0-domain:
        type: string
      auth0-clientId:
        type: string
      auth0-audience:
        type: string
      auth0-callback:
        type: string
      hasura-admin-secret:
        type: string
    steps:
      - checkout
      - restore-dependencies
      - run:
          name: Build app
          command: NEXT_PUBLIC_BASE_URL=<< parameters.base-url >> NEXT_PUBLIC_GRAPHQL_URL=<< parameters.graphql-url >> NEXT_PUBLIC_AUTH0_CONNECTION=<< parameters.auth0-connection >> NEXT_PUBLIC_AUTH0_DOMAIN=<< parameters.auth0-domain >> NEXT_PUBLIC_AUTH0_CLIENT_ID=<< parameters.auth0-clientId >> NEXT_PUBLIC_AUTH0_AUDIENCE=<< parameters.auth0-audience >> NEXT_PUBLIC_AUTH0_CALLBACK=<< parameters.auth0-callback >> HASURA_ADMIN_SECRET=<< parameters.hasura-admin-secret >> npm run build:prod
      - run:
          name: Package app
          command: |
            mkdir deploy
            cp -r .next deploy
            cp -r public deploy
            cp package.json deploy
            cp package-lock.json deploy
            cp next.config.js deploy
      - clever-deploy:
          deploy-dir: "./deploy"
          clever-app-id: << parameters.clever-app-id >>

# ---------------------------------------------------------------------------------
# WORKFLOWS - the order of execution
# ---------------------------------------------------------------------------------

workflows:
  deploy-staging:
    jobs:
      - install-dependencies
      - format:
          requires: [install-dependencies]
      - lint:
          requires: [install-dependencies]
      - unit-test:
          requires: [install-dependencies]
      - build:
          requires: [format, lint, unit-test]
      - deploy-hasura:
          requires: [build]
          clever-app-id: app_dd676b9a-5e95-4bab-9e21-ba6f9582e12b
          context: clever-cloud2-zenika-dev
          filters: &staging-filters
            branches:
              only: main
      - apply-hasura-migrations:
          requires: [deploy-hasura]
          hasura-admin-secret: $HASURA_ADMIN_SECRET_STAGING
          hasura-endpoint: $HASURA_ENDPOINT_STAGING
          filters: *staging-filters
      - deploy-app:
          requires: [apply-hasura-migrations]
          graphql-url: $NEXT_STAGING_PUBLIC_GRAPHQL_URL
          auth0-connection: $NEXT_STAGING_PUBLIC_AUTH0_CONNECTION
          auth0-domain: $NEXT_PUBLIC_AUTH0_DOMAIN
          auth0-clientId: $NEXT_PUBLIC_AUTH0_CLIENT_ID
          auth0-audience: $NEXT_PUBLIC_AUTH0_AUDIENCE
          auth0-callback: $NEXT_PUBLIC_AUTH0_CALLBACK
          hasura-admin-secret: $HASURA_ADMIN_SECRET_STAGING
          base-url: $NEXT_STAGING_BASE_URL
          clever-app-id: app_ca84588b-5a62-4b57-a5f0-86260c6382a5
          context: clever-cloud2-zenika-dev
          filters: *staging-filters
      - deploy-bot:
          requires: [format, lint, unit-test]
          clever-app-id: app_f3ae1d9d-d9ad-4ce3-a019-d18a99e5c73a
          context: clever-cloud2-zenika-dev
          filters: *staging-filters

  deploy-prod:
    jobs:
      - install-dependencies:
          filters: &prod-filters
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - format:
          requires: [install-dependencies]
          filters: *prod-filters
      - lint:
          requires: [install-dependencies]
          filters: *prod-filters
      - unit-test:
          requires: [install-dependencies]
          filters: *prod-filters
      - build:
          requires: [format, lint, unit-test]
          filters: *prod-filters
      - deploy-hasura:
          requires: [build]
          filters: *prod-filters
          clever-app-id: $HASURA_CLEVER_APP_ID_PROD
          context: clever-cloud2-zenika-dev
      - apply-hasura-migrations:
          requires: [deploy-hasura]
          hasura-admin-secret: $HASURA_ADMIN_SECRET_PROD
          hasura-endpoint: $HASURA_ENDPOINT_PROD
          filters: *prod-filters
      - deploy-app:
          requires: [apply-hasura-migrations]
          graphql-url: $NEXT_PROD_PUBLIC_GRAPHQL_URL
          auth0-connection: $NEXT_PROD_PUBLIC_AUTH0_CONNECTION
          auth0-domain: $NEXT_PUBLIC_AUTH0_DOMAIN
          auth0-clientId: $NEXT_PUBLIC_AUTH0_CLIENT_ID
          auth0-audience: $NEXT_PUBLIC_AUTH0_AUDIENCE
          auth0-callback: $NEXT_PUBLIC_AUTH0_CALLBACK
          hasura-admin-secret: $HASURA_ADMIN_SECRET_PROD
          base-url: $NEXT_PROD_BASE_URL
          clever-app-id: $CLEVER_APP_ID_PROD
          context: clever-cloud2-zenika-dev
          filters: *prod-filters
      - deploy-bot:
          requires: [format, lint, unit-test]
          clever-app-id: app_fe53126e-88fa-4a72-9e47-366b0ffed556
          context: clever-cloud2-zenika-dev
          filters: *prod-filters
